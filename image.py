# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'image.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from openpyxl import Workbook
import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import sys
from time import sleep
import pandas as pd

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]

    def rowCount(self, index):
        # The length of the outer list.
        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return len(self._data[0])

class Ui_MainWindow(object):
    def __init__(self):
        self.dataset = pd.read_excel('data.xlsx')
        self.records = self.dataset[['ERN','NAME']].values.tolist()
        self.data = [
          [4, 9, 2],
          [1, 0, 0],
          [3, 5, 0],
          [3, 3, 2],
          [7, 8, 9],
        ]

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(690, 499)
        # self.list_data()
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(0, 10, 320, 120))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")

        self.enrollment = QtWidgets.QLabel(self.formLayoutWidget)
        self.enrollment.setObjectName("enrollment")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.enrollment)

        self.username = QtWidgets.QLabel(self.formLayoutWidget)
        self.username.setObjectName("username")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.username)

        self.input_ern = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.input_ern.setObjectName("input_ern")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.input_ern)

        self.inputuser = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.inputuser.setObjectName("inputuser")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.inputuser)

        self.image = QtWidgets.QPushButton(self.formLayoutWidget)
        self.image.setObjectName("image")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.image)
        self.image.clicked.connect(self.take_photo)
        
        self.image_name = QtWidgets.QLabel(self.formLayoutWidget)
        self.image_name.setObjectName("image_name")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.image_name)

        self.submit = QtWidgets.QPushButton(self.centralwidget)
        self.submit.setGeometry(QtCore.QRect(100, 130, 89, 25))
        self.submit.setObjectName("submit")
        self.submit.clicked.connect(self.write)

        self.table = QtWidgets.QTableView(self.centralwidget)
        self.table.setGeometry(QtCore.QRect(330, 10, 300, 211))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.table.setFont(font)
        self.table.setObjectName("table")
        self.model = TableModel(self.records)
        self.table.setModel(self.model)

        MainWindow.setCentralWidget(self.centralwidget)
        
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 312, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.enrollment.setText(_translate("MainWindow", "Enrollment:"))
        self.username.setText(_translate("MainWindow", "Username:"))
        self.image.setText(_translate("MainWindow", "Capture Image"))
        self.image_name.setText(_translate("MainWindow", ""))
        self.submit.setText(_translate("MainWindow", "Submit"))

    def write(self):
        ern = self.input_ern.text()
        name = self.inputuser.text()
        
        data = {'ERN': ern, 'NAME': name, 'IMAGE':file_name_path}
        self.dataset  = self.dataset .append(data, ignore_index=True)
        self.dataset.to_excel('data.xlsx', index=False)
        cv2.imwrite(filename=file_name_path, img=frame)
        self.clear_all()
        self.list_data()

    def take_photo(self):
        global key, webcam
        key = cv2. waitKey(1)
        webcam = cv2.VideoCapture(0)
        while True:
            try:
                global frame
                check, frame = webcam.read()
                cv2.imshow("Capturing", frame)
                key = cv2.waitKey(1)
                if key == ord('s'):
                    global counter
                    global file_name_path
                    file_name_path = self.input_ern.text()+'_'+self.inputuser.text() + '.jpg'
                    self.image_name.setText(file_name_path)
                    self.updatesize()
                    webcam.release()
                    img_ = cv2.imread(file_name_path, cv2.IMREAD_ANYCOLOR)
                    webcam.release()
                    cv2.destroyAllWindows()
                    break
                elif key == ord('q'):
                    webcam.release()
                    cv2.destroyAllWindows()
                    break
            except(KeyboardInterrupt):
                print("Turning off camera.")
                webcam.release()
                print("Camera off.")
                print("Program ended.")
                cv2.destroyAllWindows()
                break
    def updatesize(self):
        self.image.adjustSize()
        self.image_name.adjustSize()
        self.username.adjustSize()
    
    def clear_all(self):
        self.image_name.clear()
        self.input_ern.clear()
        self.inputuser.clear()

    def list_data(self):
        self.dataset = pd.read_excel('data.xlsx')
        self.records = self.dataset[['ERN','NAME']].values.tolist()
        self.model = TableModel(self.records)
        self.table.setModel(self.model)
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
