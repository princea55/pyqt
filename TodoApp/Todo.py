# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Todo.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(398, 403)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.input_task = QtWidgets.QLineEdit(self.centralwidget)
        self.input_task.setGeometry(QtCore.QRect(90, 20, 201, 31))
        self.input_task.setObjectName("input_task")
        # self.input_task.editingFinished()
       

        self.Add_button = QtWidgets.QPushButton(self.centralwidget)
        self.Add_button.setGeometry(QtCore.QRect(90, 70, 89, 25))
        self.Add_button.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.Add_button.setObjectName("Add_button")
        self.Add_button.clicked.connect(self.add_todo)
        
        

        self.remove_button = QtWidgets.QPushButton(self.centralwidget)
        self.remove_button.setGeometry(QtCore.QRect(200, 70, 89, 25))
        self.remove_button.setObjectName("remove_button")
        self.remove_button.clicked.connect(self.removeSel)

        self.update_button = QtWidgets.QPushButton(self.centralwidget)
        self.update_button.setGeometry(QtCore.QRect(300, 70, 89, 25))
        self.update_button.setObjectName("update_button")
        self.update_button.clicked.connect(self.update)

        self.task_label = QtWidgets.QLabel(self.centralwidget)
        self.task_label.setGeometry(QtCore.QRect(10, 30, 67, 17))
        self.task_label.setObjectName("task_label")

        self.list_w = QtWidgets.QListWidget(self.centralwidget)
        self.list_w.setGeometry(QtCore.QRect(90, 140, 256, 192))
        self.list_w.setObjectName("list_w")
        self.list_w.itemClicked.connect(self.edit)

        self.list_label = QtWidgets.QLabel(self.centralwidget)
        self.list_label.setGeometry(QtCore.QRect(10, 140, 67, 17))
        self.list_label.setObjectName("list_label")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 398, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Add_button.setText(_translate("MainWindow", "Add"))
        self.remove_button.setText(_translate("MainWindow", "Remove"))
        self.update_button.setText(_translate("MainWindow", "Update"))
        self.task_label.setText(_translate("MainWindow", "Task:"))
        self.list_label.setText(_translate("MainWindow", "Todo List:"))

    def add_todo(self):
        self.task = self.input_task.text()
        self.list_w.addItem(self.task)
        self.input_task.clear()
        

    def removeSel(self):
        listItems=self.list_w.selectedItems()
        if not listItems: return        
        for item in listItems:
            self.list_w.takeItem(self.list_w.row(item))

    def edit(self, item):
        self.input_task.setText(item.text())
    
    def update(self):
        self.list_w.insertItem(self.list_w.row(self.list_w.selectedItems()[0]), self.input_task.text())
        self.removeSel()
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
